#!/bin/bash

export MALLOC_CHECK_=0 # workaround for LP: #520465
export LC_ALL=C
export DEBIAN_FRONTEND=noninteractive

mount -t proc proc "$rootfs/proc"
mount -o bind /dev "$rootfs/dev"
mount -o bind /dev/pts "$rootfs/dev/pts"
mount -t sysfs sys "$rootfs/sys"

cat << EOF > "$rootfs/debconf.set"
console-common console-data/keymap/policy select Select keymap from full list
console-common console-data/keymap/full select en-latin1-nodeadkeys
EOF

cat << EOF > "$rootfs/third-stage"
#!/bin/bash

dpkg-divert --add --local --divert /usr/sbin/invoke-rc.d.chroot --rename /usr/sbin/invoke-rc.d
cp /bin/true /usr/sbin/invoke-rc.d
echo -e "#!/bin/sh\nexit 101" > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

apt-get clean
rm -rf /var/lib/apt/lists/*
apt-get clean
apt-get update

debconf-set-selections /debconf.set
rm -f /debconf.set
apt-get -y install locales-all git-core binutils ca-certificates initramfs-tools locales console-common less nano git
echo "root:toor" | chpasswd

# This looks weird, but we do it twice because every so often, there's a failure to download from the mirror
# So to workaround it, we attempt to install them twice.
echo "I: Installing packages with apt-get: $packages"
apt-get --yes install $packages || apt-get --yes --fix-broken install
apt-get --yes install $packages || apt-get --yes --fix-broken install

rm -f /usr/sbin/policy-rc.d
rm -f /usr/sbin/invoke-rc.d
dpkg-divert --remove --rename /usr/sbin/invoke-rc.d
EOF
# End of third-stage script

# Let's do a little bit of magic from outside the chroot
if [ "$build_size" = full ]; then
	# We should run git clone outside chroot because it has issues with machine-code translation
	git clone https://github.com/Proxmark/proxmark3.git "$rootfs/opt/proxmark3"
	git clone https://github.com/adaptivethreat/Empire.git "$rootfs/opt/Empire"

	# powershell for arm64 is not yet available in Microsofts repos so let's install it manually
	if [ $build_arch == "arm64" ]; then
		mkdir -p $rootfs/opt/microsoft/powershell
		wget -P $rootfs/opt/microsoft/powershell https://github.com/PowerShell/PowerShell/releases/download/v6.2.0-preview.4/powershell-6.2.0-preview.4-linux-arm64.tar.gz
                tar -xzf $rootfs/opt/microsoft/powershell/powershell-6.2.0-preview.4-linux-arm64.tar.gz -C $rootfs/opt/microsoft/powershell
		rm $rootfs/opt/microsoft/powershell/powershell-6.2.0-preview.4-linux-arm64.tar.gz
	fi
	if [ $build_arch == "armhf" ]; then
		mkdir -p $rootfs/opt/microsoft/powershell
		wget -P $rootfs/opt/microsoft/powershell https://github.com/PowerShell/PowerShell/releases/download/v6.2.0-preview.4/powershell-6.2.0-preview.4-linux-arm32.tar.gz
                tar -xzf $rootfs/opt/microsoft/powershell/powershell-6.2.0-preview.4-linux-arm32.tar.gz -C $rootfs/opt/microsoft/powershell
		rm $rootfs/opt/microsoft/powershell/powershell-6.2.0-preview.4-linux-arm32.tar.gz
	fi
	# Microsoft no longer supports deletion of the file DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY to disable telemetry
	# We have to set this environment variable instead
	cat << EOF > "$rootfs/etc/profile.d/powershell.sh"
# Microsoft no longer supports deletion of the file DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY to disable telemetry
# We have to set this environment variable instead

export POWERSHELL_TELEMETRY_OPTOUT=1
EOF

        cat << EOF >> "$rootfs/etc/bash.bashrc"
# Microsoft no longer supports deletion of the file DELETE_ME_TO_DISABLE_CONSOLEHOST_TELEMETRY to disable telemetry
# We have to set this environment variable instead

export POWERSHELL_TELEMETRY_OPTOUT=1
EOF

        # The installation of Empire will still throw a few errors in relation to not being able to install powershell and that it cannot disable telemetry but that is not
	# to worry about anymore as we have taken care of it ourselves now

# End of doing a little magic from outside the chroot

	cat << EOF >> "$rootfs/third-stage"

# Enable PHP in Apache
a2enmod php7.3

# Enable /var/www/html as default, disable mana unless we need it
a2dissite 000-mana-toolkit.conf
a2ensite 000-default.conf

if cd /opt/proxmark3; then
        ## Install some dependencies first
        apt install -y libpcsclite-dev pcscd pkg-config
	make
fi

if cd /opt/Empire/setup; then
        # Lets patch install.sh to build xar for our target architecture
        if [ $build_arch == "arm64" ]; then
            sed "install.sh" -i -e "s/(cd xar-1.5.2 \&\& \.\/configure)/(cd xar-1.5.2 \&\& \.\/configure --build=armv8l-unkown-linux-gnu)/"
        elif [ $build_arch == "armhf" ]; then
            sed "install.sh" -i -e "s/(cd xar-1.5.2 \&\& \.\/configure)/(cd xar-1.5.2 \&\& \.\/configure --build=armv7l-unkown-linux-gnu)/"
        fi
	chmod +x install.sh
	printf "\n" | ./install.sh
fi
EOF
	# End of third-stage script append
fi

chmod +x "$rootfs/third-stage"
chroot_do /third-stage

# Add /system/xbin to PATH
echo "[+] Adding /system/xbin to path"
cat << EOF >> "$rootfs/root/.profile"

# Add /system/xbin to PATH
PATH="$PATH:/system/xbin"
EOF

# Source .bashrc and .profile at login
echo "[+] Adding bashrc/profile sourcing to bash_profile"
cat << EOF >> "$rootfs/root/.bash_profile"

. /root/.bashrc
. /root/.profile
cd ~
EOF

# Modify Kismet log saving folder
sed -i 's|.*\blogprefix=.*|logprefix=/captures/kismet/|g' "$rootfs/etc/kismet/kismet.conf"
sed -i 's|.*\bncsource=wlan0|ncsource=wlan1|g' "$rootfs/etc/kismet/kismet.conf"
sed -i 's|.*\bgpshost=.*|gpshost=127.0.0.1:2947|g' "$rootfs/etc/kismet/kismet.conf"

# Modify SSHD to allow password logins which is a security risk 
# if the user doesn't change their password
# or change their configuration for key based ssh
echo "[+] Modifying SSH to allow root user"

sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/g' "$rootfs/etc/ssh/sshd_config"
sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/g' "$rootfs/etc/ssh/sshd_config"

# Install dictionary
mkdir -p "$rootfs/opt/dic"
tar xvf dictionary/89.tar.gz -C "$rootfs/opt/dic"
cp dictionary/wordlist.txt "$rootfs/opt/dic/wordlist.txt"
cp dictionary/pinlist.txt "$rootfs/opt/dic/pinlist.txt"

# Sets the default for hostapd.conf to the mana karma version
sed -i 's#^DAEMON_CONF=.*#DAEMON_CONF=/sdcard/nh_files/configs/hostapd-karma.conf#' "$rootfs/etc/init.d/hostapd"
sed -i 's/wlan0/wlan1/g' "$rootfs/etc/mana-toolkit/hostapd-mana-"*

# DNSMASQ Configuration options for optional access point
cat << EOF > "$rootfs/etc/dnsmasq.conf"
log-facility=/var/log/dnsmasq.log
#address=/#/10.0.0.1
#address=/google.com/10.0.0.1
interface=wlan1
dhcp-range=10.0.0.10,10.0.0.250,12h
dhcp-option=3,10.0.0.1
dhcp-option=6,10.0.0.1
#no-resolv
log-queries
EOF

# In order for metasploit to work daemon,nginx,postgres must all be added to inet
# beef-xss creates user beef-xss. Openvpn server requires nobdy:nobody in order to work.
cat << EOF >> "$rootfs/etc/group"
inet:x:3004:postgres,root,beef-xss,daemon,nginx,mysql
nobody:x:3004:nobody
EOF

# Apt now adds a new user to "nobody" but the _apt user can't access updates
# because of inet.  Modify passwd to put them in inet group for android
sed -i -e 's/^\(_apt:\)\([^:]\)\(:[0-9]*\)\(:[0-9]*\):/\1\2\3:3004:/' "$rootfs/etc/passwd"

# Fix armitage to run on NH
# https://github.com/offensive-security/kali-nethunter/issues/600
sed -i s/-XX\:\+AggressiveHeap//g "$rootfs/usr/share/armitage/armitage"

# Insert correct .bashrc file from kali-defaults
chroot_do cp /etc/skel/.bashrc /root/.bashrc

# Copy necessary scripts and make executable (/dev/null to supress error msgs for following symlinks)
chroot_do chmod 755 /usr/bin/* 2> /dev/null
chroot_do chmod 755 /usr/share/mana-toolkit/run-mana/*.sh 2> /dev/null

# Minor fix for mana-toolkit which made changes in update.  We need to mirror fixes.
sed -i 's|dhcpd -cf /etc/mana-toolkit/dhcpd\.conf.*|dnsmasq -z -C /etc/mana-toolkit/dnsmasq-dhcpd.conf -i $phy -I lo|' "$rootfs/usr/share/mana-toolkit/run-mana/"*

echo "[+] Completed stage 3!"
